package spirit

import (
	"github.com/gogap/event_center"
)

var (
	EventCenter event_center.EventCenter = event_center.NewClassicEventCenter(SPIRIT)
)

const (
	EVENT_BEFORE_PAUSE  = "EVENT_BEFORE_PAUSE"
	EVENT_BEFORE_RESUME = "EVENT_BEFORE_RESUME"
	EVENT_AFTER_PAUSE   = "EVENT_AFTER_PAUSE"
	EVENT_AFTER_RESUME  = "EVENT_AFTER_RESUME"

	EVENT_CMD_PAUSE_OR_RESUME = "EVENT_CMD_PAUSE_OR_RESUME"
	EVENT_CMD_STOP            = "EVENT_CMD_STOP"
	EVENT_CMD_PAUSE           = "EVENT_CMD_PAUSE"
	EVENT_CMD_RESUME          = "EVENT_CMD_RESUME"

	EVENT_RECEIVER_STOPPED           = "EVENT_RECEIVER_STOPPED"
	EVENT_RECEIVER_STARTED           = "EVENT_RECEIVER_STARTED"
	EVENT_RECEIVER_MSG_COUNT_UPDATED = "EVENT_RECEIVER_MSG_COUNT_UPDATED"
	EVENT_RECEIVER_MSG_ERROR         = "EVENT_RECEIVER_MSG_ERROR"
	EVENT_RECEIVER_MSG_PROCESSED     = "EVENT_RECEIVER_MSG_PROCESSED"
	EVENT_RECEIVER_MSG_DELETED       = "EVENT_RECEIVER_MSG_DELETED"

	EVENT_HEARTBEAT = "EVENT_HEARTBEAT"

	EVENT_BEFORE_HOOK = "EVENT_BEFORE_HOOK"
	EVENT_AFTER_HOOK  = "EVENT_AFTER_HOOK"

	EVENT_BEFORE_MESSAGE_SEND = "EVENT_BEFORE_MESSAGE_SEND"
	EVENT_AFTER_MESSAGE_SEND  = "EVENT_AFTER_MESSAGE_SEND"

	EVENT_BASE_COMPONENT_BEFORE_RUN = "EVENT_BASE_COMPONENT_BEFORE_RUN"
	EVENT_BASE_COMPONENT_AFTER_RUN  = "EVENT_BASE_COMPONENT_AFTER_RUN"

	EVENT_BASE_COMPONENT_BEFORE_HANDLER_REGISTER = "EVENT_BASE_COMPONENT_BEFORE_HANDLER_REGISTER"
	EVENT_BASE_COMPONENT_AFTER_HANDLER_REGISTER  = "EVENT_BASE_COMPONENT_AFTER_HANDLER_REGISTER"
	EVENT_BASE_COMPONENT_HANDLER_REGISTERED      = "EVENT_BASE_COMPONENT_HANDLER_REGISTERED"

	EVENT_BASE_COMPONENT_BEFORE_HANDLER_BIND = "EVENT_BASE_COMPONENT_BEFORE_HANDLER_BIND"
	EVENT_BASE_COMPONENT_AFTER_HANDLER_BIND  = "EVENT_BASE_COMPONENT_AFTER_HANDLER_BIND"
	EVENT_BASE_COMPONENT_HANDLER_BOUND       = "EVENT_BASE_COMPONENT_HANDLER_BOUND"

	EVENT_BASE_COMPONENT_BEFORE_RECEIVER_BIND = "EVENT_BASE_COMPONENT_BEFORE_RECEIVER_BIND"
	EVENT_BASE_COMPONENT_AFTER_RECEIVER_BIND  = "EVENT_BASE_COMPONENT_AFTER_RECEIVER_BIND"
	EVENT_BASE_COMPONENT_RECEIVER_BOUND       = "EVENT_BASE_COMPONENT_RECEIVER_BOUND"

	EVENT_BASE_COMPONENT_PAUSED = "EVENT_BASE_COMPONENT_PAUSED"

	EVENT_BASE_COMPONENT_STOPPED  = "EVENT_BASE_COMPONENT_STOPPED"
	EVENT_BASE_COMPONENT_STOPPING = "EVENT_BASE_COMPONENT_STOPPING"
)

func init() {
	EventCenter.RegisterEvent(event_center.ConcurrencyAndWaitMode,
		EVENT_CMD_STOP,
		EVENT_CMD_PAUSE_OR_RESUME,
	)

	EventCenter.RegisterEvent(event_center.ConcurrencyMode,
		EVENT_BEFORE_PAUSE,
		EVENT_BEFORE_RESUME,
		EVENT_AFTER_PAUSE,
		EVENT_AFTER_RESUME,
		EVENT_HEARTBEAT,
		EVENT_BEFORE_HOOK,
		EVENT_AFTER_HOOK,
		EVENT_BEFORE_MESSAGE_SEND,
		EVENT_AFTER_MESSAGE_SEND,
		EVENT_RECEIVER_MSG_COUNT_UPDATED,
		EVENT_RECEIVER_MSG_ERROR,
		EVENT_RECEIVER_STARTED,
		EVENT_RECEIVER_STOPPED,
		EVENT_RECEIVER_MSG_PROCESSED,
		EVENT_BASE_COMPONENT_BEFORE_RUN,
		EVENT_BASE_COMPONENT_AFTER_RUN,
		EVENT_BASE_COMPONENT_BEFORE_HANDLER_REGISTER,
		EVENT_BASE_COMPONENT_AFTER_HANDLER_REGISTER,
		EVENT_BASE_COMPONENT_HANDLER_REGISTERED,
		EVENT_BASE_COMPONENT_BEFORE_HANDLER_BIND,
		EVENT_BASE_COMPONENT_AFTER_HANDLER_BIND,
		EVENT_BASE_COMPONENT_HANDLER_BOUND,
		EVENT_BASE_COMPONENT_BEFORE_RECEIVER_BIND,
		EVENT_BASE_COMPONENT_AFTER_RECEIVER_BIND,
		EVENT_BASE_COMPONENT_RECEIVER_BOUND,
		EVENT_BASE_COMPONENT_PAUSED,
		EVENT_BASE_COMPONENT_STOPPED,
		EVENT_BASE_COMPONENT_STOPPING,
	)
}
