package spirit

import (
	"github.com/gogap/event_center"
)

var (
	EventCenter event_center.EventCenter = event_center.NewClassicEventCenter(SPIRIT)
)

const (
	_EVENT_CENTER_RECEIVER = "_EVENT_CENTER_RECEIVER_"
)

const (
	EVENT_CMD_STOP = "EVENT_CMD_STOP"

	EVENT_RECEIVER_STOPPED           = "EVENT_RECEIVER_STOPPED"
	EVENT_RECEIVER_STARTED           = "EVENT_RECEIVER_STARTED"
	EVENT_RECEIVER_MSG_COUNT_UPDATED = "EVENT_RECEIVER_MSG_COUNT_UPDATED"

	EVENT_RECEIVER_MSG_RECEIVED = "EVENT_RECEIVER_MSG_RECEIVED"
	EVENT_RECEIVER_MSG_ERROR    = "EVENT_RECEIVER_MSG_ERROR"
	EVENT_RECEIVER_MSG_DELETED  = "EVENT_RECEIVER_MSG_DELETED"

	EVENT_HEARTBEAT = "EVENT_HEARTBEAT"

	EVENT_BEFORE_MESSAGE_HOOK = "EVENT_BEFORE_MESSAGE_HOOK"
	EVENT_AFTER_MESSAGE_HOOK  = "EVENT_AFTER_MESSAGE_HOOK"

	EVENT_BEFORE_MESSAGE_SEND = "EVENT_BEFORE_MESSAGE_SEND"
	EVENT_AFTER_MESSAGE_SEND  = "EVENT_AFTER_MESSAGE_SEND"

	EVENT_BASE_COMPONENT_STOPPING = "EVENT_BASE_COMPONENT_STOPPING"
	EVENT_BASE_COMPONENT_STOPPED  = "EVENT_BASE_COMPONENT_STOPPED"
)

func init() {
	EventCenter.RegisterEvent(event_center.ConcurrencyAndWaitMode,
		EVENT_CMD_STOP,
	)

	EventCenter.RegisterEvent(event_center.ConcurrencyMode,
		EVENT_HEARTBEAT,
		EVENT_BEFORE_MESSAGE_HOOK,
		EVENT_AFTER_MESSAGE_HOOK,
		EVENT_BEFORE_MESSAGE_SEND,
		EVENT_AFTER_MESSAGE_SEND,
		EVENT_RECEIVER_MSG_COUNT_UPDATED,
		EVENT_RECEIVER_MSG_ERROR,
		EVENT_RECEIVER_STARTED,
		EVENT_RECEIVER_STOPPED,
		EVENT_BASE_COMPONENT_STOPPING,
		EVENT_BASE_COMPONENT_STOPPED,
	)
}
